{"version":3,"sources":["components/contactForm/ContactFormStyled.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactListItem/ContactListItemStyled.js","components/contactListItem/ContactListItem.js","components/contactList/ContactList.js","App.js","index.js"],"names":["ContactFormContainer","styled","form","InputContainer","input","LabelContainer","label","ButtonContainer","button","ContactForm","state","name","number","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","addNewContact","onSubmit","this","htmlFor","type","id","pattern","title","required","onChange","Component","Filter","filter","ContactListItemContainer","li","ContactListItem","deleteContact","className","onClick","ContactList","contacts","map","contact","uuid","App","some","alert","prevState","getFilteredContacts","toLowerCase","includes","trim","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.632ab1bc.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nexport const ContactFormContainer = styled.form`\r\n  width: 50vw;\r\n  padding: 16px;\r\n  border: 2px solid grey;\r\n  border-radius: 4px;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const InputContainer = styled.input`\r\n  display: block;\r\n  min-width: 300px;\r\n  padding: 5px 10px;\r\n  margin-bottom: 15px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 4px;\r\n  :focus {\r\n    outline: none;\r\n    border: 3px solid lightblue;\r\n  }\r\n`;\r\n\r\nexport const LabelContainer = styled.label`\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const ButtonContainer = styled.button`\r\n  padding: 2px 10px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 4px;\r\n  background-color: white;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition-duration: 0.4s;\r\n  :hover {\r\n    background-color: lightblue;\r\n    color: white;\r\n    border-color: lightblue;\r\n  }\r\n`;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  ButtonContainer,\r\n  ContactFormContainer,\r\n  InputContainer,\r\n  LabelContainer\r\n} from './ContactFormStyled';\r\n\r\nclass ContactForm extends Component {\r\n  state = {name: '', number: ''};\r\n\r\n  handleChange = event => {\r\n    this.setState({[event.target.name]: event.target.value});\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    this.props.addNewContact({\r\n      name: this.state.name,\r\n      number: this.state.number\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ContactFormContainer onSubmit={this.handleSubmit}>\r\n        <LabelContainer htmlFor=\"name\">Name</LabelContainer>\r\n        <InputContainer\r\n          type=\"text\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChange}\r\n          value={this.state.name}\r\n        />\r\n        <LabelContainer htmlFor=\"number\">Number</LabelContainer>\r\n        <InputContainer\r\n          type=\"tel\"\r\n          id=\"number\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n          value={this.state.value}\r\n        />\r\n        <ButtonContainer type=\"submit\">Add contact</ButtonContainer>\r\n      </ContactFormContainer>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {InputContainer, LabelContainer} from '../contactForm/ContactFormStyled';\r\n\r\nconst Filter = ({handleChange, filter}) => {\r\n  return (\r\n    <>\r\n      <LabelContainer htmlFor=\"filter\">Find contacts by name</LabelContainer>\r\n      <InputContainer\r\n        id=\"filter\"\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n        name=\"filter\"\r\n        value={filter}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Filter;\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactListItemContainer = styled.li`\r\n  margin-bottom: 10px;\r\n  .contactListItemText {\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport {ButtonContainer} from '../contactForm/ContactFormStyled';\r\nimport {ContactListItemContainer} from './ContactListItemStyled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({name, number, deleteContact}) => {\r\n  return (\r\n    <ContactListItemContainer>\r\n      <p className=\"contactListItemText\">\r\n        {name}: {number}\r\n      </p>\r\n      <ButtonContainer type=\"button\" onClick={deleteContact}>\r\n        Delete\r\n      </ButtonContainer>\r\n    </ContactListItemContainer>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {v4 as uuid} from 'uuid';\r\nimport ContactListItem from '../contactListItem/ContactListItem';\r\n\r\nconst ContactList = ({contacts, deleteContact}) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(contact => (\r\n        <ContactListItem\r\n          name={contact.name}\r\n          number={contact.number}\r\n          key={uuid()}\r\n          deleteContact={() => deleteContact(contact.id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nexport default ContactList;\r\n","import {Component} from 'react';\nimport ContactForm from './components/contactForm/ContactForm';\nimport Filter from './components/filter/Filter';\nimport ContactList from './components/contactList/ContactList';\nimport {v4 as uuid} from 'uuid';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'}\n    ],\n    filter: ''\n  };\n\n  componentDidMount() {\n    // console.log('[componentDidMount]');\n    const contacts = localStorage.getItem('contacts');\n    if (contacts) {\n      const parsedContacts = JSON.parse(contacts);\n      // console.log(parsedContacts);\n      this.setState({contacts: parsedContacts});\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('[componentDidUpdate]');\n    if (prevState.contacts !== this.state.contacts) {\n      // console.log(prevState.contacts, 'prevState');\n      // console.log(this.state.contacts, 'state');\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addNewContact = ({name, number}) => {\n    if (this.state.contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    this.setState(prevState => {\n      const newContacts = [\n        ...prevState.contacts,\n        {id: uuid(), name: name, number: number}\n      ];\n      return {contacts: newContacts};\n    });\n  };\n\n  getFilteredContacts = () =>\n    this.state.contacts.filter(contact =>\n      contact.name\n        .toLowerCase()\n        .includes(this.state.filter.toLowerCase().trim())\n    );\n\n  handleChange = event => {\n    this.setState({[event.target.name]: event.target.value});\n  };\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id)\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addNewContact={this.addNewContact} />\n\n        <h2>Contacts</h2>\n        <Filter filter={this.state.filter} handleChange={this.handleChange} />\n        <ContactList\n          contacts={this.getFilteredContacts()}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}